/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { FeedbackNote } from "../../feedbackNote/base/FeedbackNote";
import { Goal } from "../../goal/base/Goal";
import { Kpi } from "../../kpi/base/Kpi";
import { Notification } from "../../notification/base/Notification";
import { PerformanceReview } from "../../performanceReview/base/PerformanceReview";
import { Report } from "../../report/base/Report";
import { ReviewTemplate } from "../../reviewTemplate/base/ReviewTemplate";
import { Task } from "../../task/base/Task";

@ObjectType()
class EmployeeProfile {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  department!: string | null;

  @ApiProperty({
    required: false,
    type: () => [FeedbackNote],
  })
  @ValidateNested()
  @Type(() => FeedbackNote)
  @IsOptional()
  feedbackNotes?: Array<FeedbackNote>;

  @ApiProperty({
    required: false,
    type: () => [Goal],
  })
  @ValidateNested()
  @Type(() => Goal)
  @IsOptional()
  goals?: Array<Goal>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  jobRole!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Kpi],
  })
  @ValidateNested()
  @Type(() => Kpi)
  @IsOptional()
  kpis?: Array<Kpi>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Notification],
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Array<Notification>;

  @ApiProperty({
    required: false,
    type: () => [PerformanceReview],
  })
  @ValidateNested()
  @Type(() => PerformanceReview)
  @IsOptional()
  performanceReviews?: Array<PerformanceReview>;

  @ApiProperty({
    required: false,
    type: () => [Report],
  })
  @ValidateNested()
  @Type(() => Report)
  @IsOptional()
  reports?: Array<Report>;

  @ApiProperty({
    required: false,
    type: () => [ReviewTemplate],
  })
  @ValidateNested()
  @Type(() => ReviewTemplate)
  @IsOptional()
  reviewTemplates?: Array<ReviewTemplate>;

  @ApiProperty({
    required: false,
    type: () => [Task],
  })
  @ValidateNested()
  @Type(() => Task)
  @IsOptional()
  tasks?: Array<Task>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { EmployeeProfile as EmployeeProfile };
