/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeProfile } from "./EmployeeProfile";
import { EmployeeProfileCountArgs } from "./EmployeeProfileCountArgs";
import { EmployeeProfileFindManyArgs } from "./EmployeeProfileFindManyArgs";
import { EmployeeProfileFindUniqueArgs } from "./EmployeeProfileFindUniqueArgs";
import { CreateEmployeeProfileArgs } from "./CreateEmployeeProfileArgs";
import { UpdateEmployeeProfileArgs } from "./UpdateEmployeeProfileArgs";
import { DeleteEmployeeProfileArgs } from "./DeleteEmployeeProfileArgs";
import { FeedbackNoteFindManyArgs } from "../../feedbackNote/base/FeedbackNoteFindManyArgs";
import { FeedbackNote } from "../../feedbackNote/base/FeedbackNote";
import { GoalFindManyArgs } from "../../goal/base/GoalFindManyArgs";
import { Goal } from "../../goal/base/Goal";
import { KpiFindManyArgs } from "../../kpi/base/KpiFindManyArgs";
import { Kpi } from "../../kpi/base/Kpi";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { PerformanceReviewFindManyArgs } from "../../performanceReview/base/PerformanceReviewFindManyArgs";
import { PerformanceReview } from "../../performanceReview/base/PerformanceReview";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReviewTemplateFindManyArgs } from "../../reviewTemplate/base/ReviewTemplateFindManyArgs";
import { ReviewTemplate } from "../../reviewTemplate/base/ReviewTemplate";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { EmployeeProfileService } from "../employeeProfile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeProfile)
export class EmployeeProfileResolverBase {
  constructor(
    protected readonly service: EmployeeProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "read",
    possession: "any",
  })
  async _employeeProfilesMeta(
    @graphql.Args() args: EmployeeProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeProfile])
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "read",
    possession: "any",
  })
  async employeeProfiles(
    @graphql.Args() args: EmployeeProfileFindManyArgs
  ): Promise<EmployeeProfile[]> {
    return this.service.employeeProfiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "read",
    possession: "own",
  })
  async employeeProfile(
    @graphql.Args() args: EmployeeProfileFindUniqueArgs
  ): Promise<EmployeeProfile | null> {
    const result = await this.service.employeeProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeProfile)
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "create",
    possession: "any",
  })
  async createEmployeeProfile(
    @graphql.Args() args: CreateEmployeeProfileArgs
  ): Promise<EmployeeProfile> {
    return await this.service.createEmployeeProfile({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeProfile)
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "update",
    possession: "any",
  })
  async updateEmployeeProfile(
    @graphql.Args() args: UpdateEmployeeProfileArgs
  ): Promise<EmployeeProfile | null> {
    try {
      return await this.service.updateEmployeeProfile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeProfile)
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeProfile(
    @graphql.Args() args: DeleteEmployeeProfileArgs
  ): Promise<EmployeeProfile | null> {
    try {
      return await this.service.deleteEmployeeProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FeedbackNote], { name: "feedbackNotes" })
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "read",
    possession: "any",
  })
  async findFeedbackNotes(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: FeedbackNoteFindManyArgs
  ): Promise<FeedbackNote[]> {
    const results = await this.service.findFeedbackNotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Goal], { name: "goals" })
  @nestAccessControl.UseRoles({
    resource: "Goal",
    action: "read",
    possession: "any",
  })
  async findGoals(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: GoalFindManyArgs
  ): Promise<Goal[]> {
    const results = await this.service.findGoals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Kpi], { name: "kpis" })
  @nestAccessControl.UseRoles({
    resource: "Kpi",
    action: "read",
    possession: "any",
  })
  async findKpis(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: KpiFindManyArgs
  ): Promise<Kpi[]> {
    const results = await this.service.findKpis(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PerformanceReview], {
    name: "performanceReviews",
  })
  @nestAccessControl.UseRoles({
    resource: "PerformanceReview",
    action: "read",
    possession: "any",
  })
  async findPerformanceReviews(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: PerformanceReviewFindManyArgs
  ): Promise<PerformanceReview[]> {
    const results = await this.service.findPerformanceReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Report], { name: "reports" })
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ReviewTemplate], { name: "reviewTemplates" })
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "read",
    possession: "any",
  })
  async findReviewTemplates(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: ReviewTemplateFindManyArgs
  ): Promise<ReviewTemplate[]> {
    const results = await this.service.findReviewTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Task], { name: "tasks" })
  @nestAccessControl.UseRoles({
    resource: "Task",
    action: "read",
    possession: "any",
  })
  async findTasks(
    @graphql.Parent() parent: EmployeeProfile,
    @graphql.Args() args: TaskFindManyArgs
  ): Promise<Task[]> {
    const results = await this.service.findTasks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
