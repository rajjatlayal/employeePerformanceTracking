/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeProfile as PrismaEmployeeProfile,
  FeedbackNote as PrismaFeedbackNote,
  Goal as PrismaGoal,
  Kpi as PrismaKpi,
  Notification as PrismaNotification,
  PerformanceReview as PrismaPerformanceReview,
  Report as PrismaReport,
  ReviewTemplate as PrismaReviewTemplate,
  Task as PrismaTask,
} from "@prisma/client";

export class EmployeeProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeProfile.count(args);
  }

  async employeeProfiles(
    args: Prisma.EmployeeProfileFindManyArgs
  ): Promise<PrismaEmployeeProfile[]> {
    return this.prisma.employeeProfile.findMany(args);
  }
  async employeeProfile(
    args: Prisma.EmployeeProfileFindUniqueArgs
  ): Promise<PrismaEmployeeProfile | null> {
    return this.prisma.employeeProfile.findUnique(args);
  }
  async createEmployeeProfile(
    args: Prisma.EmployeeProfileCreateArgs
  ): Promise<PrismaEmployeeProfile> {
    return this.prisma.employeeProfile.create(args);
  }
  async updateEmployeeProfile(
    args: Prisma.EmployeeProfileUpdateArgs
  ): Promise<PrismaEmployeeProfile> {
    return this.prisma.employeeProfile.update(args);
  }
  async deleteEmployeeProfile(
    args: Prisma.EmployeeProfileDeleteArgs
  ): Promise<PrismaEmployeeProfile> {
    return this.prisma.employeeProfile.delete(args);
  }

  async findFeedbackNotes(
    parentId: string,
    args: Prisma.FeedbackNoteFindManyArgs
  ): Promise<PrismaFeedbackNote[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbackNotes(args);
  }

  async findGoals(
    parentId: string,
    args: Prisma.GoalFindManyArgs
  ): Promise<PrismaGoal[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .goals(args);
  }

  async findKpis(
    parentId: string,
    args: Prisma.KpiFindManyArgs
  ): Promise<PrismaKpi[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kpis(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findPerformanceReviews(
    parentId: string,
    args: Prisma.PerformanceReviewFindManyArgs
  ): Promise<PrismaPerformanceReview[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .performanceReviews(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async findReviewTemplates(
    parentId: string,
    args: Prisma.ReviewTemplateFindManyArgs
  ): Promise<PrismaReviewTemplate[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviewTemplates(args);
  }

  async findTasks(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<PrismaTask[]> {
    return this.prisma.employeeProfile
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasks(args);
  }
}
