/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FeedbackNoteService } from "../feedbackNote.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FeedbackNoteCreateInput } from "./FeedbackNoteCreateInput";
import { FeedbackNote } from "./FeedbackNote";
import { FeedbackNoteFindManyArgs } from "./FeedbackNoteFindManyArgs";
import { FeedbackNoteWhereUniqueInput } from "./FeedbackNoteWhereUniqueInput";
import { FeedbackNoteUpdateInput } from "./FeedbackNoteUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FeedbackNoteControllerBase {
  constructor(
    protected readonly service: FeedbackNoteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeedbackNote })
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFeedbackNote(
    @common.Body() data: FeedbackNoteCreateInput
  ): Promise<FeedbackNote> {
    return await this.service.createFeedbackNote({
      data: {
        ...data,

        employeeProfile: data.employeeProfile
          ? {
              connect: data.employeeProfile,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,

        employeeProfile: {
          select: {
            id: true,
          },
        },

        feedbackDate: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FeedbackNote] })
  @ApiNestedQuery(FeedbackNoteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async feedbackNotes(@common.Req() request: Request): Promise<FeedbackNote[]> {
    const args = plainToClass(FeedbackNoteFindManyArgs, request.query);
    return this.service.feedbackNotes({
      ...args,
      select: {
        content: true,
        createdAt: true,

        employeeProfile: {
          select: {
            id: true,
          },
        },

        feedbackDate: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeedbackNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async feedbackNote(
    @common.Param() params: FeedbackNoteWhereUniqueInput
  ): Promise<FeedbackNote | null> {
    const result = await this.service.feedbackNote({
      where: params,
      select: {
        content: true,
        createdAt: true,

        employeeProfile: {
          select: {
            id: true,
          },
        },

        feedbackDate: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeedbackNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFeedbackNote(
    @common.Param() params: FeedbackNoteWhereUniqueInput,
    @common.Body() data: FeedbackNoteUpdateInput
  ): Promise<FeedbackNote | null> {
    try {
      return await this.service.updateFeedbackNote({
        where: params,
        data: {
          ...data,

          employeeProfile: data.employeeProfile
            ? {
                connect: data.employeeProfile,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,

          employeeProfile: {
            select: {
              id: true,
            },
          },

          feedbackDate: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeedbackNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFeedbackNote(
    @common.Param() params: FeedbackNoteWhereUniqueInput
  ): Promise<FeedbackNote | null> {
    try {
      return await this.service.deleteFeedbackNote({
        where: params,
        select: {
          content: true,
          createdAt: true,

          employeeProfile: {
            select: {
              id: true,
            },
          },

          feedbackDate: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
