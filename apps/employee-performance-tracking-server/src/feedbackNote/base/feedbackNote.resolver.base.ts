/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FeedbackNote } from "./FeedbackNote";
import { FeedbackNoteCountArgs } from "./FeedbackNoteCountArgs";
import { FeedbackNoteFindManyArgs } from "./FeedbackNoteFindManyArgs";
import { FeedbackNoteFindUniqueArgs } from "./FeedbackNoteFindUniqueArgs";
import { CreateFeedbackNoteArgs } from "./CreateFeedbackNoteArgs";
import { UpdateFeedbackNoteArgs } from "./UpdateFeedbackNoteArgs";
import { DeleteFeedbackNoteArgs } from "./DeleteFeedbackNoteArgs";
import { EmployeeProfile } from "../../employeeProfile/base/EmployeeProfile";
import { FeedbackNoteService } from "../feedbackNote.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FeedbackNote)
export class FeedbackNoteResolverBase {
  constructor(
    protected readonly service: FeedbackNoteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "read",
    possession: "any",
  })
  async _feedbackNotesMeta(
    @graphql.Args() args: FeedbackNoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FeedbackNote])
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "read",
    possession: "any",
  })
  async feedbackNotes(
    @graphql.Args() args: FeedbackNoteFindManyArgs
  ): Promise<FeedbackNote[]> {
    return this.service.feedbackNotes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FeedbackNote, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "read",
    possession: "own",
  })
  async feedbackNote(
    @graphql.Args() args: FeedbackNoteFindUniqueArgs
  ): Promise<FeedbackNote | null> {
    const result = await this.service.feedbackNote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedbackNote)
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "create",
    possession: "any",
  })
  async createFeedbackNote(
    @graphql.Args() args: CreateFeedbackNoteArgs
  ): Promise<FeedbackNote> {
    return await this.service.createFeedbackNote({
      ...args,
      data: {
        ...args.data,

        employeeProfile: args.data.employeeProfile
          ? {
              connect: args.data.employeeProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeedbackNote)
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "update",
    possession: "any",
  })
  async updateFeedbackNote(
    @graphql.Args() args: UpdateFeedbackNoteArgs
  ): Promise<FeedbackNote | null> {
    try {
      return await this.service.updateFeedbackNote({
        ...args,
        data: {
          ...args.data,

          employeeProfile: args.data.employeeProfile
            ? {
                connect: args.data.employeeProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeedbackNote)
  @nestAccessControl.UseRoles({
    resource: "FeedbackNote",
    action: "delete",
    possession: "any",
  })
  async deleteFeedbackNote(
    @graphql.Args() args: DeleteFeedbackNoteArgs
  ): Promise<FeedbackNote | null> {
    try {
      return await this.service.deleteFeedbackNote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EmployeeProfile, {
    nullable: true,
    name: "employeeProfile",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "read",
    possession: "any",
  })
  async getEmployeeProfile(
    @graphql.Parent() parent: FeedbackNote
  ): Promise<EmployeeProfile | null> {
    const result = await this.service.getEmployeeProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
