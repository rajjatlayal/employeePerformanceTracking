/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Goal as PrismaGoal,
  EmployeeProfile as PrismaEmployeeProfile,
} from "@prisma/client";

export class GoalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GoalCountArgs, "select">): Promise<number> {
    return this.prisma.goal.count(args);
  }

  async goals(args: Prisma.GoalFindManyArgs): Promise<PrismaGoal[]> {
    return this.prisma.goal.findMany(args);
  }
  async goal(args: Prisma.GoalFindUniqueArgs): Promise<PrismaGoal | null> {
    return this.prisma.goal.findUnique(args);
  }
  async createGoal(args: Prisma.GoalCreateArgs): Promise<PrismaGoal> {
    return this.prisma.goal.create(args);
  }
  async updateGoal(args: Prisma.GoalUpdateArgs): Promise<PrismaGoal> {
    return this.prisma.goal.update(args);
  }
  async deleteGoal(args: Prisma.GoalDeleteArgs): Promise<PrismaGoal> {
    return this.prisma.goal.delete(args);
  }

  async getEmployeeProfile(
    parentId: string
  ): Promise<PrismaEmployeeProfile | null> {
    return this.prisma.goal
      .findUnique({
        where: { id: parentId },
      })
      .employeeProfile();
  }
}
