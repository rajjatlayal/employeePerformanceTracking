/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ReviewTemplate } from "./ReviewTemplate";
import { ReviewTemplateCountArgs } from "./ReviewTemplateCountArgs";
import { ReviewTemplateFindManyArgs } from "./ReviewTemplateFindManyArgs";
import { ReviewTemplateFindUniqueArgs } from "./ReviewTemplateFindUniqueArgs";
import { CreateReviewTemplateArgs } from "./CreateReviewTemplateArgs";
import { UpdateReviewTemplateArgs } from "./UpdateReviewTemplateArgs";
import { DeleteReviewTemplateArgs } from "./DeleteReviewTemplateArgs";
import { EmployeeProfile } from "../../employeeProfile/base/EmployeeProfile";
import { ReviewTemplateService } from "../reviewTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReviewTemplate)
export class ReviewTemplateResolverBase {
  constructor(
    protected readonly service: ReviewTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "read",
    possession: "any",
  })
  async _reviewTemplatesMeta(
    @graphql.Args() args: ReviewTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReviewTemplate])
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "read",
    possession: "any",
  })
  async reviewTemplates(
    @graphql.Args() args: ReviewTemplateFindManyArgs
  ): Promise<ReviewTemplate[]> {
    return this.service.reviewTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReviewTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "read",
    possession: "own",
  })
  async reviewTemplate(
    @graphql.Args() args: ReviewTemplateFindUniqueArgs
  ): Promise<ReviewTemplate | null> {
    const result = await this.service.reviewTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewTemplate)
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "create",
    possession: "any",
  })
  async createReviewTemplate(
    @graphql.Args() args: CreateReviewTemplateArgs
  ): Promise<ReviewTemplate> {
    return await this.service.createReviewTemplate({
      ...args,
      data: {
        ...args.data,

        employeeProfile: args.data.employeeProfile
          ? {
              connect: args.data.employeeProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReviewTemplate)
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "update",
    possession: "any",
  })
  async updateReviewTemplate(
    @graphql.Args() args: UpdateReviewTemplateArgs
  ): Promise<ReviewTemplate | null> {
    try {
      return await this.service.updateReviewTemplate({
        ...args,
        data: {
          ...args.data,

          employeeProfile: args.data.employeeProfile
            ? {
                connect: args.data.employeeProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewTemplate)
  @nestAccessControl.UseRoles({
    resource: "ReviewTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteReviewTemplate(
    @graphql.Args() args: DeleteReviewTemplateArgs
  ): Promise<ReviewTemplate | null> {
    try {
      return await this.service.deleteReviewTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EmployeeProfile, {
    nullable: true,
    name: "employeeProfile",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeProfile",
    action: "read",
    possession: "any",
  })
  async getEmployeeProfile(
    @graphql.Parent() parent: ReviewTemplate
  ): Promise<EmployeeProfile | null> {
    const result = await this.service.getEmployeeProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
